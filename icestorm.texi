\input texinfo
@c %**start of header
@setfilename icestorm.info
@include version.texi
@settitle IceStorm Learner's Documentation
@documentencoding UTF-8
@c %**end of header

@copying
@strong{This manual is work-in-progress.  You can find the official
IceStorm documentation @uref{http://www.clifford.at/icestorm/#docs,
here}.}

Copyright @copyright{} 2017 Roland Lutz

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@titlepage
@title IceStorm Learner's Documentation
@author Roland Lutz
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top IceStorm

@insertcopying
@end ifnottex

@c Additional general information.

@menu
* Introduction::
* Lattice iCE40 1K and 8K FPGAs::
@c * Crash Course to Verilog::
* Writing Designs for iCE40 FPGAs::
@c * The Build Process::
@c * Using the IceStorm Tools on the Bitstream::
* Programing the FPGA::
@c * Communicating with the FPGA::
* GNU Free Documentation License:: Copying this manual.
* Index:: Complete index
@end menu

@c ============================================================================

@node Introduction
@unnumbered Introduction

IceStorm has an excellent reference documentation of the 1K and 8K
bitstreams as well as a few additional pages explaining the various
tiles and the binary bitstream format.  However, for a reader not
already familiar with IceStorm or the iCE40 FPGA, it would be helpful
if a more introduction-like documentation was available.

This document is intended to become this documentation for the
IceStorm project and to contain all information which is useful for
working with it.  It follows the guidelines for GNU documentation
(@pxref{Documentation,, Documenting Programs, standards, GNU Coding
Standards}).

@c ============================================================================

@node Lattice iCE40 1K and 8K FPGAs
@chapter Lattice iCE40 1K and 8K FPGAs

@menu
* Figures::
@end menu

@node Figures
@section Figures

@float Figure,fig:tiles386
@image{graphics/tiles-386,6in,,Tiles in the iCE40 HX386}
@caption{Tile fabric for the iCE40 LP384 FPGA.
Pins on the left or bottom of an I/O tile are connected to I/O block 0
and pins on the right or top to I/O block 1.
Pin numbers correspond to the 32-pin QFN package; pins shown in
grey aren't connected in this package but are in other packages.}
@c The main grid of 6x8 logic tiles is surrounded by four banks of I/O
@c tiles; there are no RAM tiles in this FPGA.
@shortcaption{Tiles in the iCE40 LP386}
@end float

@float Figure,fig:tiles1k
@image{graphics/tiles-1k,6in,,Tiles in the iCE40 HX1K}
@caption{Tile fabric for the iCE40 xx1K FPGA.
Pins on the left or bottom of an I/O tile are connected to I/O block 0
and pins on the right or top to I/O block 1.
Pin numbers correspond to the 144-pin TQFP package; the pin shown
in grey isn't connected in this package but is in other packages.}
@c The main grid of 12x16 logic and RAM tiles is surrounded by four
@c banks of I/O tiles.
@c The PLL PORTA clock is fed directly into the input path of I/O
@c block 6 0 1 (pin 49) and the PORTB clock is fed into the input path
@c of I/O block 7 0 0 (pin 50).
@shortcaption{Tiles in the iCE40 HX1K}
@end float

@float Figure,fig:tiles8k
@image{graphics/tiles-8k,6in,,Tiles in the iCE40 HX8K}
@caption{Tile fabric for the iCE40 xx4K and xx8K FPGA.
Pins on the left or bottom of an I/O tile are connected to I/O block 0
and pins on the right or top to I/O block 1.
Pin numbers correspond to the 144-pin TQFP package; pins shown in
grey aren't connected in this package but are in other packages.}
@c The main grid of 32x32 logic and RAM tiles is surrounded by four
@c banks of I/O tiles.
@shortcaption{Tiles in the iCE40 HX8K}
@end float

I suggest you spend a few minutes meditating over these pictures.
This is the map of what you are working with; knowing it well will
make things much easier.

@c ============================================================================

@c @node Crash Course to Verilog
@c @chapter A Bitstream-o-naut's Crash Course to Verilog
@c
@c This document cannot be a substitute for a proper Verilog
@c introduction.  However, already a small subset of Verilog is
@c sufficient to experiment with the bitstream and understand the Verilog
@c code generated by IceStorm.  This chapter focuses on an understanding
@c of this subset and how it relates to the instantiated hardware on the
@c FPGA.
@c
@c @node Hello world
@c @section Hello world
@c
@c @example
@c `default_nettype none
@c
@c module top(input Pmod1, output D5);
@c   assign D5 = Pmod1;
@c endmodule
@c @end example
@c
@c @node Blocking logic
@c @section Blocking logic
@c
@c @subsection Wires
@c
@c @subsection Registers
@c
@c @subsection Logic operations
@c
@c @node Non-blocking logic
@c @section Non-blocking logic
@c
@c @subsection @code{always @@(@dots{})}
@c
@c @subsection Control structures
@c
@c @subsection Special case: @code{always @@(*)}
@c
@c @node Modules
@c @section Modules
@c
@c @c Including files?

@c ============================================================================

@node Writing Designs for iCE40 FPGAs
@chapter Writing Designs for iCE40 FPGAs

@menu
* Pin mappings::
@end menu

@node Pin mappings
@section Pin mappings

@float Table,tbl:icestick-pins
@multitable {I/O block} {199} {12.0000MHz clock} {out}
@headitem I/O Block @tab Pin @tab Description @tab in/out
@item 0 14 1 @tab 1 @tab DCDn @tab out
@item 0 14 0 @tab 2 @tab DSRn @tab out
@item 0 13 1 @tab 3 @tab DTRn @tab in
@item 0 13 0 @tab 4 @tab CTSn @tab out
@item 0 12 1 @tab 7 @tab RTSn @tab in
@item 0 12 0 @tab 8 @tab RS232_Tx_TTL @tab out
@item 0 11 1 @tab 9 @tab RS232_Rx_TTL @tab in
@item 0 8 1 @tab 21 @tab 12.0000@dmn{MHz} clock @tab in
@item 4 0 0 @tab 44 @tab J3 10 @tab
@item 4 0 1 @tab 45 @tab J3 9 @tab
@item 5 0 0 @tab 47 @tab J3 8 @tab
@item 5 0 1 @tab 48 @tab J3 7 @tab
@item 7 0 1 @tab 56 @tab J3 6 @tab
@item 8 0 1 @tab 60 @tab J3 5 @tab
@item 9 0 0 @tab 61 @tab J3 4 @tab
@item 9 0 1 @tab 62 @tab J3 3 @tab
@item 11 0 0 @tab 67 @tab SPI MOSI @tab
@item 11 0 1 @tab 68 @tab SPI MISO @tab
@item 12 0 0 @tab 70 @tab SPI SCK @tab
@item 12 0 1 @tab 71 @tab SPI SS_B @tab
@item 13 3 1 @tab 78 @tab Pmod 1 @tab
@item 13 4 0 @tab 79 @tab Pmod 2 @tab
@item 13 4 1 @tab 80 @tab Pmod 3 @tab
@item 13 6 0 @tab 81 @tab Pmod 4 @tab
@item 13 6 1 @tab 87 @tab Pmod 7 @tab
@item 13 7 0 @tab 88 @tab Pmod 8 @tab
@item 13 7 1 @tab 90 @tab Pmod 9 @tab
@item 13 8 0 @tab 91 @tab Pmod 10 @tab
@item 13 9 1 @tab 95 @tab D5 (green) @tab out
@item 13 11 0 @tab 96 @tab D4 (red) @tab out
@item 13 11 1 @tab 97 @tab D3 (red) @tab out
@item 13 12 0 @tab 98 @tab D2 (red) @tab out
@item 13 12 1 @tab 99 @tab D1 (red) @tab out
@item 13 14 1 @tab 105 @tab IR TXD @tab
@item 13 15 0 @tab 106 @tab IR RXD @tab
@item 13 15 1 @tab 107 @tab IR SD @tab
@item 12 17 1 @tab 112 @tab J1 3 @tab
@item 12 17 0 @tab 113 @tab J1 4 @tab
@item 11 17 1 @tab 114 @tab J1 5 @tab
@item 11 17 0 @tab 115 @tab J1 6 @tab
@item 10 17 1 @tab 116 @tab J1 7 @tab
@item 10 17 0 @tab 117 @tab J1 8 @tab
@item 9 17 1 @tab 118 @tab J1 9 @tab
@item 9 17 0 @tab 119 @tab J1 10 @tab
@end multitable
@caption{Pin mapping for the Lattice iCEstick}
@shortcaption{Pin mapping for the Lattice iCEstick}
@end float

@c ============================================================================

@c @node The Build Process
@c @chapter The Build Process
@c
@c @node Synthesizing a Design with Yosys
@c @section Synthesizing a Design with Yosys
@c
@c @node Generating a Bitstream with @code{arachne-pnr}
@c @section Generating a Bitstream with @code{arachne-pnr}

@c ============================================================================

@c @node Using the IceStorm Tools on the Bitstream
@c @chapter Using the IceStorm Tools on the Bitstream
@c
@c @menu
@c @c * icebox_chipdb Invocation:: Invoking the @code{icebox_chipdb} Program
@c @c * icebox_colbuf Invocation:: Invoking the @code{icebox_colbuf} Program
@c @c * icebox_diff Invocation:: Invoking the @code{icebox_diff} Program
@c @c * icebox_explain Invocation:: Invoking the @code{icebox_explain} Program
@c @c * icebox_html Invocation:: Invoking the @code{icebox_html} Program
@c @c * icebox_maps Invocation:: Invoking the @code{icebox_maps} Program
@c @c * icebox_stat Invocation:: Invoking the @code{icebox_stat} Program
@c @c * icebox_vlog Invocation:: Invoking the @code{icebox_vlog} Program
@c @c * icebram Invocation:: Invoking the @code{icebram} Program
@c @c * icemulti Invocation:: Invoking the @code{icemulti} Program
@c @c * ice[un]pack Invocation:: Invoking the @code{ice[un]pack} Program
@c @c * icepll Invocation:: Invoking the @code{icepll} Program
@c @c * icetime Invocation:: Invoking the @code{icetime} Program
@c @end menu

@c @node icebox_chipdb Invocation
@c @section Invoking the @code{icebox_chipdb} Program
@c
@c @include usage/icebox_chipdb.texi

@c @node icebox_colbuf Invocation
@c @section Invoking the @code{icebox_colbuf} Program
@c
@c @include usage/icebox_colbuf.texi

@c @node icebox_diff Invocation
@c @section Invoking the @code{icebox_diff} Program
@c
@c @include usage/icebox_diff.texi

@c @node icebox_explain Invocation
@c @section Invoking the @code{icebox_explain} Program
@c
@c @include usage/icebox_explain.texi

@c @node icebox_html Invocation
@c @section Invoking the @code{icebox_html} Program
@c
@c @include usage/icebox_html.texi

@c @node icebox_maps Invocation
@c @section Invoking the @code{icebox_maps} Program
@c
@c @include usage/icebox_maps.texi

@c @node icebox_stat Invocation
@c @section Invoking the @code{icebox_stat} Program
@c
@c @include usage/icebox_stat.texi

@c @node icebox_vlog Invocation
@c @section Invoking the @code{icebox_vlog} Program
@c
@c @include usage/icebox_vlog.texi

@c @node icebram Invocation
@c @section Invoking the @code{icebram} Program
@c
@c @include usage/icebram.texi

@c @node icemulti Invocation
@c @section Invoking the @code{icemulti} Program
@c
@c @include usage/icemulti.texi

@c @node ice[un]pack Invocation
@c @section Invoking the @code{ice[un]pack} Program
@c
@c @include usage/ice[un]pack.texi

@c @node icepll Invocation
@c @section Invoking the @code{icepll} Program
@c
@c @include usage/icepll.texi

@c @node icetime Invocation
@c @section Invoking the @code{icetime} Program
@c
@c @include usage/icetime.texi

@c ============================================================================

@node Programing the FPGA
@chapter Programing the FPGA

@menu
* iceprog Invocation:: Invoking the @code{iceprog} Program
@end menu

@node iceprog Invocation
@section Invoking the @code{iceprog} Program

@include usage/iceprog.texi

@c ============================================================================

@c @node Communicating with the FPGA
@c @chapter Communicating with the FPGA

@c ============================================================================

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi


@node Index
@unnumbered Index

@printindex cp

@bye
